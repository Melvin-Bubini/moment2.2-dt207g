{"mappings":"AAAA;AAEA,IAAI,MAAM;AAEV,IAAI,YAAY,SAAS,cAAc,CAAC;AAExC,WAAW,+BAA+B;AAI1C,eAAe;IACX,MAAM,WAAW,MAAM,MAAM;IAE7B,MAAM,OAAO,MAAM,SAAS,IAAI;IAEhC,IAAI,KAAK,OAAO,CAAC,MAAM,GAAG,GAAG;QACzB,UAAU,KAAK,CAAC,OAAO,GAAG,SAAS,mCAAmC;QACtE,UAAU,KAAK,CAAC,MAAM,GAAG;QACzB,UAAU,KAAK,CAAC,OAAO,GAAG;QAC1B,cAAc,KAAK,OAAO,GAAG,iCAAiC;IAClE,OAAO;QACH,UAAU,KAAK,CAAC,OAAO,GAAG,QAAQ,8CAA8C;QAChF,UAAU,KAAK,CAAC,MAAM,GAAG;QACzB,UAAU,KAAK,CAAC,OAAO,GAAG;IAC9B;AACJ;AAEA,eAAe,SAAS,WAAW,EAAE,QAAQ,EAAE,QAAQ;IACnD,IAAI,KAAK;QACL,aAAa;QACb,UAAU;QACV,UAAU;IACd;IACA,MAAM,WAAW,MAAM,MAAM,KAAK;QAC9B,QAAQ;QACR,SAAS;YACL,gBAAgB;QACpB;QACA,MAAM,KAAK,SAAS,CAAC;IACzB;IAEA,MAAM,OAAO,MAAM,SAAS,IAAI;IAChC,QAAQ,GAAG,CAAC;AAChB;AAEA,SAAS,cAAc,MAAM;IACzB,UAAU,SAAS,GAAG,IAAI,sBAAsB;IAEhD,OAAO,OAAO,CAAC,CAAA;QACX,IAAI,YAAY,SAAS,aAAa,CAAC;QACvC,UAAU,SAAS,CAAC,GAAG,CAAC;QAExB,IAAI,qBAAqB,SAAS,aAAa,CAAC;QAChD,mBAAmB,WAAW,GAAG,GAAG,WAAW;QAE/C,IAAI,kBAAkB,SAAS,aAAa,CAAC;QAC7C,gBAAgB,WAAW,GAAG,gBAAgB,GAAG,QAAQ;QAEzD,IAAI,kBAAkB,SAAS,aAAa,CAAC;QAC7C,gBAAgB,WAAW,GAAG,YAAY,GAAG,QAAQ;QAErD,IAAI,eAAe,SAAS,aAAa,CAAC;QAC1C,aAAa,WAAW,GAAG;QAC3B,aAAa,gBAAgB,CAAC,SAAS;YACnC,MAAM,SAAS,GAAG,EAAE,GAAG,qDAAqD;YAC5E,WAAW,+CAA+C;QAC9D;QAEA,UAAU,WAAW,CAAC;QACtB,UAAU,WAAW,CAAC;QACtB,UAAU,WAAW,CAAC;QACtB,UAAU,WAAW,CAAC,eAAe,oCAAoC;QAEzE,UAAU,WAAW,CAAC;IAC1B;AACJ;AAEA,eAAe,SAAS,IAAI;IACxB,IAAI;QACA,MAAM,WAAW,MAAM,MAAM,CAAC,EAAE,IAAI,CAAC,EAAE,KAAK,CAAC,EAAE;YAC3C,QAAQ;QACZ;QAEA,IAAI,CAAC,SAAS,EAAE,EACZ,MAAM,IAAI,MAAM;QAGpB,0BAA0B;QAC1B,MAAM,YAAY,SAAS,cAAc,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC;QACtD,IAAI,WACA,UAAU,MAAM;aAEhB,QAAQ,IAAI,CAAC,CAAC,UAAU,EAAE,KAAK,gCAA0B,CAAC;QAG9D,OAAO,MAAM,2CAA2C;IAC5D,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,0CAA0C;QACxD,OAAO,OAAO,gDAAgD;IAClE;AACJ;AAGA,SAAS,cAAc,CAAC,UAAU,gBAAgB,CAAC,UAAU,SAAU,KAAK;IACxE,MAAM,cAAc,IAAI,uCAAuC;IAE/D,IAAI,cAAc,SAAS,cAAc,CAAC,oBAAoB,KAAK;IACnE,IAAI,WAAW,SAAS,cAAc,CAAC,iBAAiB,KAAK;IAC7D,IAAI,WAAW,SAAS,cAAc,CAAC,iBAAiB,KAAK;IAE7D,kDAAkD;IAClD,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,UAAU;QACxC,MAAM,qCAA+B,qBAAqB;QAC1D,QAAQ,wCAAwC;IACpD;IAEA,SAAS,aAAa,UAAU;IAEhC,4DAA4D;IAC5D,SAAS,cAAc,CAAC,oBAAoB,KAAK,GAAG;IACpD,SAAS,cAAc,CAAC,iBAAiB,KAAK,GAAG;IACjD,SAAS,cAAc,CAAC,iBAAiB,KAAK,GAAG;AACrD","sources":["src/js/main.js"],"sourcesContent":["\"use strict\";\r\n\r\nlet url = \"http://127.0.0.1:3000/api/cv\";\r\n\r\nlet cvArticle = document.getElementById('cvArticle')\r\n\r\ngetData(); // Hämta datan när sidan laddas\r\n\r\n\r\n\r\nasync function getData() {\r\n    const response = await fetch(url);\r\n\r\n    const data = await response.json();\r\n\r\n    if (data.results.length > 0) {\r\n        cvArticle.style.display = \"block\"; // Visa cvArticle om det finns data\r\n        cvArticle.style.border = \"2px solid black\";\r\n        cvArticle.style.padding = \"1em\";\r\n        displayCvData(data.results); // Visa datan när den har hämtats\r\n    } else {\r\n        cvArticle.style.display = \"none\"; // Dölj cvArticle om det inte finns någon data\r\n        cvArticle.style.border = \"none\";\r\n        cvArticle.style.padding = \"none\";\r\n    }\r\n}\r\n\r\nasync function createCv(companyname, jobtitle, location) {\r\n    let cv = {\r\n        companyname: companyname,\r\n        jobtitle: jobtitle,\r\n        location: location\r\n    }\r\n    const response = await fetch(url, {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"content-type\": \"Application/json\"\r\n        },\r\n        body: JSON.stringify(cv)\r\n    });\r\n\r\n    const data = await response.json();\r\n    console.log(data);\r\n}\r\n\r\nfunction displayCvData(cvData) {\r\n    cvArticle.innerHTML = \"\"; // Rensa tidigare data\r\n\r\n    cvData.forEach(cv => {\r\n        let cvElement = document.createElement(\"div\");\r\n        cvElement.classList.add(\"cv\");\r\n\r\n        let companyNameElement = document.createElement(\"h2\");\r\n        companyNameElement.textContent = cv.companyname;\r\n\r\n        let jobTitleElement = document.createElement(\"p\");\r\n        jobTitleElement.textContent = \"Jobbtitel: \" + cv.jobtitle;\r\n\r\n        let locationElement = document.createElement(\"p\");\r\n        locationElement.textContent = \"Plats: \" + cv.location;\r\n\r\n        let deleteButton = document.createElement(\"button\");\r\n        deleteButton.textContent = \"Ta bort\";\r\n        deleteButton.addEventListener(\"click\", async () => {\r\n            await deleteCv(cv.id); // Anropa funktionen för att ta bort CV-informationen\r\n            getData(); // Uppdatera datan på skärmen efter borttagning\r\n        });\r\n\r\n        cvElement.appendChild(companyNameElement);\r\n        cvElement.appendChild(jobTitleElement);\r\n        cvElement.appendChild(locationElement);\r\n        cvElement.appendChild(deleteButton); // Lägg till knappen för att ta bort\r\n\r\n        cvArticle.appendChild(cvElement);\r\n    });\r\n}\r\n\r\nasync function deleteCv(cvId) { // Lägg till cvId som en parameter\r\n    try {\r\n        const response = await fetch(`${url}/${cvId}`, {\r\n            method: \"DELETE\"\r\n        });\r\n\r\n        if (!response.ok) {\r\n            throw new Error(\"Kunde inte ta bort CV från servern.\");\r\n        }\r\n\r\n        // Ta bort CV från skärmen\r\n        const cvElement = document.getElementById(`cv_${cvId}`);\r\n        if (cvElement) {\r\n            cvElement.remove();\r\n        } else {\r\n            console.warn(`CV med id ${cvId} hittades inte på skärmen.`);\r\n        }\r\n\r\n        return true; // Returnera true om borttagningen lyckades\r\n    } catch (error) {\r\n        console.error(\"Ett fel uppstod vid borttagning av CV:\", error);\r\n        return false; // Returnera false om borttagningen misslyckades\r\n    }\r\n}\r\n\r\n\r\ndocument.getElementById('cvForm').addEventListener('submit', function (event) {\r\n    event.preventDefault(); // Förhindra standardformulärinsändning\r\n\r\n    let companyname = document.getElementById('companynameInput').value;\r\n    let jobtitle = document.getElementById('jobtitleInput').value;\r\n    let location = document.getElementById('locationInput').value;\r\n\r\n    // Kontrollera om något obligatoriskt fält är tomt\r\n    if (!companyname || !jobtitle || !location) {\r\n        alert(\"Vänligen fyll i alla fält.\"); // Visa felmeddelande\r\n        return; // Avbryt funktionen om ett fält är tomt\r\n    }\r\n\r\n    createCv(companyname, jobtitle, location);\r\n\r\n    // Rensa inputfälten efter att CV-informationen har skickats\r\n    document.getElementById('companynameInput').value = \"\";\r\n    document.getElementById('jobtitleInput').value = \"\";\r\n    document.getElementById('locationInput').value = \"\";\r\n});"],"names":[],"version":3,"file":"index.aa69868b.js.map","sourceRoot":"/__parcel_source_root/"}